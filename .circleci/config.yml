# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  php: circleci/php@1.1.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-and-test:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/php:7.4.33
      - image: cimg/postgres:9.6
        environment:
          POSTGRES_DB: huitzilopochtli_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""

    environment:
      APP_ENV: testing 
      APP_DEBUG: "true"
      APP_TIMEZONE: UTC 
      DB_CONNECTION: pgsql 
      DB_DATABASE: huitzilopochtli_test 
      DB_USERNAME: postgres 
      CACHE_DRIVER: file 
      QUEUE_DRIVER: sync
      CC_TEST_REPORTER_ID: dd59bebb5353eb14190743ab2ca416d13e31733e760c47fb376ef3565f0679ea

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - php/install-composer:
          install-version: 2.7.7
      - php/install-packages
      - run:
          name: "Wait for PostgreSQL"
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: "Migrate database"
          command: php artisan migrate
      - run:
          name: "Install and enable XDebug"
          command: |
            sudo pecl install xdebug-3.1
            sudo docker-php-ext-enable xdebug
      - run:
          name: "Setup Code Climate"
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: "Generate and Upload Coverage Report"
          command: |
            ./cc-test-reporter before-build
            composer test
            ./cc-test-reporter after-build --coverage-input-type clover --exit-code $?

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-and-test-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test